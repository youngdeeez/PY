name: Build, Push and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/my-flask-app:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/my-flask-app:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-flask-app:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/my-flask-app:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: success()

    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Логинимся в Docker Hub
          echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          
          # Убедимся, что у нас последняя версия образа
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-flask-app:latest
          
          # Останавливаем и удаляем старый контейнер
          docker stop my-flask-app || true
          docker rm my-flask-app || true
          
          # Запускаем новый контейнер
          docker run -d \
            --name my-flask-app \
            -p 80:5000 \
            -e FLASK_ENV=production \
            ${{ secrets.DOCKERHUB_USERNAME }}/my-flask-app:latest
          
          #Очищаем старые образы для экономии места
          docker image prune -af